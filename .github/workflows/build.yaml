name: Release

on: push

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  version:
    name: Check Version
    runs-on: ubuntu-latest
    outputs:
      latest: ${{ steps.latest.outputs.version }}
      previous: ${{ steps.previous.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - run: sudo apt-get -y install jq

      - name: get the current version
        id: latest
        run: echo "version=$(git show HEAD:version.json | jq .version --raw-output)" >> "$GITHUB_OUTPUT"

      - name: get the previous version
        id: previous
        run: echo "version=$(git show HEAD~1:version.json | jq .version --raw-output)" >> "$GITHUB_OUTPUT"

      - name: check version
        shell: bash
        run: |
          if [[ "$VERSION" != "$PREVIOUS_VERSION" ]]; then
            echo "[DEBUG] version change confirmed: $VERSION";
            echo "          Latest Version: $VERSION";
            echo "        Previous Version: $PREVIOUS_VERSION";
          else
            echo "[ERROR] Version not changed:";
            echo "          Latest Version: $VERSION";
            echo "        Previous Version: $PREVIOUS_VERSION";
            exit 1;
          fi
        env:
          VERSION: ${{ steps.latest.outputs.version }}
          PREVIOUS_VERSION: ${{ steps.previous.outputs.version }}


  build:
    name: Build Artifacts
    needs: version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23

      - name: Install Dependencies
        working-directory: ./go
        run: |
          go mod tidy
          go mod download

      - name: Build with Makefile
        working-directory: ./go
        run: |
          make build
        env:
          VERSION: ${{ needs.version.outputs.latest }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.os }}
          path: ./go/bin/*

  release:
    name: Create Release
    needs: [version, build]
    runs-on: ubuntu-latest
    if: needs.version.result == 'success'
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get -y install zip

      - name: Create migrations.zip
        run: |
          mkdir -p artifacts
          zip -r artifacts/migrations.zip supabase/migrations

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-ubuntu-latest
          path: ./artifacts/ubuntu

      - uses: actions/download-artifact@v3
        with:
          name: build-macos-latest
          path: ./artifacts/macos

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.version.outputs.latest }}
          files: |
            ./artifacts/ubuntu/*
            ./artifacts/macos/*
            ./artifacts/migrations.zip
            ./version.json
