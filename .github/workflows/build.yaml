name: Release

on: push

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  version:
    name: Check Version
    runs-on: ubuntu-latest
    outputs:
      latest: ${{ steps.latest.outputs.version }}
      previous: ${{ steps.previous.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - run: sudo apt-get -y install jq

      - name: get the current version
        id: latest
        run: echo "version=$(git show HEAD:version.json | jq .version --raw-output)" >> "$GITHUB_OUTPUT"

      - name: get the previous version
        id: previous
        run: echo "version=$(git show HEAD~1:version.json | jq .version --raw-output)" >> "$GITHUB_OUTPUT"

      - name: check version
        shell: bash
        run: |
          if [[ "$VERSION" != "$PREVIOUS_VERSION" ]]; then
            echo "[DEBUG] version change confirmed: $VERSION";
            echo "          Latest Version: $VERSION";
            echo "        Previous Version: $PREVIOUS_VERSION";
          else
            echo "[ERROR] Version not changed:";
            echo "          Latest Version: $VERSION";
            echo "        Previous Version: $PREVIOUS_VERSION";
            exit 1;
          fi
        env:
          VERSION: ${{ steps.latest.outputs.version }}
          PREVIOUS_VERSION: ${{ steps.previous.outputs.version }}

  release:
    name: Create Release
    needs: version
    runs-on: ubuntu-latest
    if: needs.version.result == 'success'
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get -y install zip

      - name: Create migrations.zip
        run: |
          mkdir -p artifacts
          zip -r artifacts/migrations.zip supabase/migrations

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.version.outputs.latest }}
          release_name: "Release ${{ needs.version.outputs.latest }}"
          draft: false
          prerelease: false
          body: "Automatically generated release for version ${{ needs.version.outputs.latest }}"

      - name: Upload version.json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./version.json
          asset_name: version.json
          asset_content_type: application/json

      - name: Upload migrations.zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/migrations.zip
          asset_name: migrations.zip
          asset_content_type: application/zip

#  macos:
#    name: MacOS
#    runs-on: macos-latest
#    needs:
#      - version
#    permissions:
#      contents: write
#      packages: write
#    steps:
#      - name: checkout repository
#        uses: actions/checkout@v4
#
#      - uses: supabase/setup-cli@v1
#        with:
#          version: 1.207.9
#
#      - run: supabase db start
#
#      - name: setup java
#        uses: actions/setup-java@v4
#        with:
#          distribution: corretto
#          java-version: 17
#          cache: gradle
#
#      - name: setup gradle
#        uses: gradle/actions/setup-gradle@v3
#
#      - name: build
#        run: ./build.sh
#        env:
#          APP_VERSION: ${{ needs.version.outputs.latest }}
#
#      - uses: actions/upload-artifact@v4
#        with:
#          name: macos-build
#          path: ./supavault*.pkg
#          if-no-files-found: error
#          retention-days: 1
